import{_ as a,c as t,o as r,ag as n}from"./chunks/framework.BZemHgQ6.js";const i="/assets/modern_dictionary_architecture.BXCaJiO2.png",f=JSON.parse('{"title":"Project Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"guide/architecture.md","filePath":"guide/architecture.md"}'),s={name:"guide/architecture.md"};function o(c,e,l,d,h,g){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="project-architecture" tabindex="-1">Project Architecture <a class="header-anchor" href="#project-architecture" aria-label="Permalink to &quot;Project Architecture&quot;">​</a></h1><p>The architecture of Modern Dictionary is designed to ensure flexibility, scalability, and maintainability. The project follows the <strong>Microservices</strong> approach, splitting the backend into multiple services based on functionality.</p><h2 id="frontend-vue-js-vite" tabindex="-1">Frontend (Vue.js + Vite) <a class="header-anchor" href="#frontend-vue-js-vite" aria-label="Permalink to &quot;Frontend (Vue.js + Vite)&quot;">​</a></h2><p>The frontend is built with <strong>Vue.js</strong> and <strong>Vite</strong>. It focuses on fast rendering and is highly modular for easier scalability.</p><ul><li><strong>Vue.js</strong> handles the user interface and integrates well with the backend API for real-time data fetching and updates.</li><li><strong>Vite</strong> ensures fast bundling and hot-reloading during development.</li></ul><h2 id="backend-laravel-node-js" tabindex="-1">Backend (Laravel + Node.js) <a class="header-anchor" href="#backend-laravel-node-js" aria-label="Permalink to &quot;Backend (Laravel + Node.js)&quot;">​</a></h2><p>The backend is split into two parts:</p><ul><li><strong>Laravel</strong>: Handles the core functionalities of the dictionary like word management, user accounts, etc.</li><li><strong>Node.js (WebSockets + Redis)</strong>: Handles real-time communication for features like instant word updates and collaboration between users.</li></ul><p>The use of <strong>Redis</strong> for caching and messaging ensures that the system is fast and responsive under high traffic.</p><h2 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h2><p>We use <strong>MySQL</strong> for the relational data storage and <strong>Redis</strong> for caching and real-time messaging.</p><h2 id="reverse-proxy-nginx" tabindex="-1">Reverse Proxy (Nginx) <a class="header-anchor" href="#reverse-proxy-nginx" aria-label="Permalink to &quot;Reverse Proxy (Nginx)&quot;">​</a></h2><p>In Modern Dictionary, we use <strong>Nginx</strong> as a <strong>reverse proxy</strong> to route requests efficiently between the frontend, backend services, and handle scalability.</p><h3 id="role-of-reverse-proxy" tabindex="-1">Role of Reverse Proxy <a class="header-anchor" href="#role-of-reverse-proxy" aria-label="Permalink to &quot;Role of Reverse Proxy&quot;">​</a></h3><ul><li><strong>Load Balancing</strong>: Nginx acts as a load balancer, distributing traffic between multiple instances of backend services (Laravel and Node.js).</li><li><strong>Routing</strong>: Nginx directs API requests to the appropriate backend service, ensuring that frontend and backend services remain decoupled.</li><li><strong>SSL Termination</strong>: Nginx handles <strong>SSL termination</strong>, ensuring that secure (HTTPS) connections are made with the clients and forwarding them to the backend via HTTP.</li><li><strong>Caching</strong>: Nginx can also cache certain responses for better performance, especially for static resources.</li></ul><h3 id="diagram" tabindex="-1">Diagram <a class="header-anchor" href="#diagram" aria-label="Permalink to &quot;Diagram&quot;">​</a></h3><p>Here is a diagram illustrating the system&#39;s architecture:</p><p><img src="'+i+'" alt="Architecture Diagram"></p>',18)]))}const p=a(s,[["render",o]]);export{f as __pageData,p as default};
