import{_ as e,c as i,o as a,ag as t}from"./chunks/framework.BZemHgQ6.js";const E=JSON.parse('{"title":"Real-time System Design","description":"","frontmatter":{},"headers":[],"relativePath":"guide/realtime-design.md","filePath":"guide/realtime-design.md"}'),n={name:"guide/realtime-design.md"};function l(h,s,r,d,p,k){return a(),i("div",null,s[0]||(s[0]=[t(`<hr><h1 id="real-time-system-design" tabindex="-1">Real-time System Design <a class="header-anchor" href="#real-time-system-design" aria-label="Permalink to &quot;Real-time System Design&quot;">​</a></h1><p>Modern Dictionary uses <strong>WebSockets</strong> and <strong>Redis</strong> to ensure that all users connected to the platform receive real-time updates.</p><h2 id="websockets-node-js" tabindex="-1">WebSockets (Node.js) <a class="header-anchor" href="#websockets-node-js" aria-label="Permalink to &quot;WebSockets (Node.js)&quot;">​</a></h2><p>The <strong>Node.js server</strong> handles WebSocket connections. Every time a user adds, updates, or deletes a word, the server broadcasts the change to all connected clients in real-time.</p><h2 id="redis-pub-sub" tabindex="-1">Redis Pub/Sub <a class="header-anchor" href="#redis-pub-sub" aria-label="Permalink to &quot;Redis Pub/Sub&quot;">​</a></h2><p>Redis&#39; <strong>Publish/Subscribe (Pub/Sub)</strong> mechanism allows the Node.js server to efficiently broadcast updates to all subscribers. This is critical for scalability, as Redis handles the message queue and delivery to connected clients.</p><h2 id="real-time-word-updates" tabindex="-1">Real-time Word Updates <a class="header-anchor" href="#real-time-word-updates" aria-label="Permalink to &quot;Real-time Word Updates&quot;">​</a></h2><p>When a user adds or updates a word, the change is pushed to all clients:</p><ul><li>A user adds a word through the frontend.</li><li>The frontend sends a request to the Laravel backend.</li><li>The backend processes the word and stores it in the database.</li><li>The Node.js server receives the update and broadcasts it to all connected clients using WebSockets and Redis.</li></ul><h2 id="example-websocket-server" tabindex="-1">Example WebSocket Server: <a class="header-anchor" href="#example-websocket-server" aria-label="Permalink to &quot;Example WebSocket Server:&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`team-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">teamId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// اضافه کردن کاربر به لیست کاربران آنلاین</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sadd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;online_users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.userId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`team-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">teamId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-joined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userId: data.userId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    onlineUsers: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">smembers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;online_users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// لیست کاربران آنلاین</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr>`,13)]))}const c=e(n,[["render",l]]);export{E as __pageData,c as default};
